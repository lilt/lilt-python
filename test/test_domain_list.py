# coding: utf-8

"""
    Lilt REST API

    Lilt REST API Support: https://lilt.atlassian.net/servicedesk/customer/portals    The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests.  The base url for this REST API is `https://api.lilt.com/`.  ## Authentication  Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.  ## Quotas  Our services have a general quota of 4000 requests per minute. Should you hit the maximum requests per minute, you will need to wait 60 seconds before you can send another request. 

    The version of the OpenAPI document: v3.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from lilt.models.domain_list import DomainList

class TestDomainList(unittest.TestCase):
    """DomainList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> DomainList:
        """Test DomainList
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `DomainList`
        """
        model = DomainList()
        if include_optional:
            return DomainList(
                items = [{"domainId":123,"domainName":"Example Domain","models":[{"id":456,"name":"Example Model","provider":"Google Translate","status":"Active","srcLang":"en","trgLang":"es","srcLocale":"US","trgLocale":"ES"}],"filterConfigs":[{"id":789,"isDefault":true,"filterConfig":"Example Filter Config","filterName":"Example Filter","configName":"Example Config Name","configDescription":"Example Config Description","subfilters":"Example Subfilters","segmentationConfigSetting":"SENTENCE","srx":"Example SRX","segmentationConfigName":"Example Segmentation Config","domains":[{"id":101,"name":"Example Domain Ref"}],"createdAt":"2024-01-01T00:00:00Z","updatedAt":"2024-01-02T00:00:00Z","default":true}],"domainMetadata":[{"id":131,"key":"Example Key","value":"Example Value"}]}],
                size = 1
            )
        else:
            return DomainList(
                items = [{"domainId":123,"domainName":"Example Domain","models":[{"id":456,"name":"Example Model","provider":"Google Translate","status":"Active","srcLang":"en","trgLang":"es","srcLocale":"US","trgLocale":"ES"}],"filterConfigs":[{"id":789,"isDefault":true,"filterConfig":"Example Filter Config","filterName":"Example Filter","configName":"Example Config Name","configDescription":"Example Config Description","subfilters":"Example Subfilters","segmentationConfigSetting":"SENTENCE","srx":"Example SRX","segmentationConfigName":"Example Segmentation Config","domains":[{"id":101,"name":"Example Domain Ref"}],"createdAt":"2024-01-01T00:00:00Z","updatedAt":"2024-01-02T00:00:00Z","default":true}],"domainMetadata":[{"id":131,"key":"Example Key","value":"Example Value"}]}],
                size = 1,
        )
        """

    def testDomainList(self):
        """Test DomainList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
