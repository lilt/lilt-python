# coding: utf-8

"""
    Lilt REST API

    Lilt REST API Support: https://lilt.atlassian.net/servicedesk/customer/portals    The Lilt REST API enables programmatic access to the full-range of Lilt backend services including:   * Training of and translating with interactive, adaptive machine translation   * Large-scale translation memory   * The Lexicon (a large-scale termbase)   * Programmatic control of the Lilt CAT environment   * Translation memory synchronization  Requests and responses are in JSON format. The REST API only responds to HTTPS / SSL requests.  The base url for this REST API is `https://api.lilt.com/`.  ## Authentication  Requests are authenticated via REST API key, which requires the Business plan.  Requests are authenticated using [HTTP Basic Auth](https://en.wikipedia.org/wiki/Basic_access_authentication). Add your REST API key as both the `username` and `password`.  For development, you may also pass the REST API key via the `key` query parameter. This is less secure than HTTP Basic Auth, and is not recommended for production use.  ## Quotas  Our services have a general quota of 4000 requests per minute. Should you hit the maximum requests per minute, you will need to wait 60 seconds before you can send another request. 

    The version of the OpenAPI document: v3.0.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from lilt.models.translation import Translation
from typing import Optional, Set
from typing_extensions import Self

class TranslationList(BaseModel):
    """
    An ranked list of translations and associated metadata.
    """ # noqa: E501
    untokenized_source: Optional[StrictStr] = Field(default=None, description="The untokenized source segment. Punctuation has not been separated from words.", alias="untokenizedSource")
    tokenized_source: Optional[StrictStr] = Field(default=None, description="The tokenized source segment. Punctuation has been separated from words.", alias="tokenizedSource")
    source_delimiters: Optional[List[StrictStr]] = Field(default=None, description="A format string that indicates, for each word, if the word should be preceded by a space.", alias="sourceDelimiters")
    translation: Optional[List[Translation]] = Field(default=None, description="A list of Translation objects.")
    __properties: ClassVar[List[str]] = ["untokenizedSource", "tokenizedSource", "sourceDelimiters", "translation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TranslationList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in translation (list)
        _items = []
        if self.translation:
            for _item_translation in self.translation:
                if _item_translation:
                    _items.append(_item_translation.to_dict())
            _dict['translation'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TranslationList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "untokenizedSource": obj.get("untokenizedSource"),
            "tokenizedSource": obj.get("tokenizedSource"),
            "sourceDelimiters": obj.get("sourceDelimiters"),
            "translation": [Translation.from_dict(_item) for _item in obj["translation"]] if obj.get("translation") is not None else None
        })
        return _obj


